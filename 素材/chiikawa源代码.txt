//chiikawa_7.pro


QT       += core gui multimedia

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

CONFIG += c++17

# You can make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

SOURCES += \
    bullet.cpp \
    enemybase.cpp \
    enemybig.cpp \
    enemyboss.cpp \
    enemybubble.cpp \
    enemybullet.cpp \
    enemychimera.cpp \
    enemyinsect.cpp \
    expball.cpp \
    gamecontrol.cpp \
    gamedefine.cpp \
    gameobject.cpp \
    main.cpp \
    gamewidget.cpp \
    mybutton.cpp \
    mydialog.cpp \
    mygraphicsview.cpp \
    myselectivebutton.cpp \
    player.cpp \
    playerbullet.cpp

HEADERS += \
    bullet.h \
    enemybase.h \
    enemybig.h \
    enemyboss.h \
    enemybubble.h \
    enemybullet.h \
    enemychimera.h \
    enemyinsect.h \
    expball.h \
    gamecontrol.h \
    gamedefine.h \
    gameobject.h \
    gamewidget.h \
    mybutton.h \
    mydialog.h \
    mygraphicsview.h \
    myselectivebutton.h \
    player.h \
    playerbullet.h

FORMS += \
    gamewidget.ui

# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target

RESOURCES += \
    img.qrc \
    sounds.qrc






//bullet.h


#ifndef BULLET_H
#define BULLET_H

#include"gameobject.h"



class Bullet : public GameObject
{


public:
    Bullet();
    Bullet(GameObject* _owner);
    virtual ~Bullet(){}

    qreal getSpeed(){return mSpeed;}
    QPointF getMoveDir(){return moveDir;}
    int getAttackPoint(){return mAttackPoint;}

    void BulletMove();

    enum BulletDir{
        DirN,//北南西东
        DirS,
        DirW,
        DirE,
        DirNW,//西北，东北，西南，东南
        DirNE,
        DirSW,
        DirSE,
        MouseDir
    };


protected:



    GameObject* mOwner;
    qreal mSpeed;
    int mAttackPoint;
    QPointF mPos;
    BulletDir mDir;
    QPointF moveDir = QPointF(1,0);


};

#endif // BULLET_H










//enemybase.h


#ifndef ENEMYBASE_H
#define ENEMYBASE_H

#include "gameobject.h"
#include "player.h"
#include<QTimer>
#include<QRandomGenerator>

class EnemyBase : public GameObject
{
    Q_OBJECT
public:
    explicit EnemyBase(GameObject *parent = nullptr);
    virtual ~EnemyBase();
    EnemyBase(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);


    void setDir(bool right){mMoveDir = right;}
    virtual void setMirrorPixmap();



    virtual void getHurt(int _attack);
    virtual void enemyMove(bool dir = 0);
    int getAttackPoint(){return mAttackPoint;}
    int getHP(){return mHP;}
    int getExpDropped(){return expDropped;}

    //音效
    QMediaPlayer *SFXplayer = nullptr;
    QAudioOutput *audiooutput = nullptr;

    virtual void startSkill();


signals:
    void isHurt();
    void isDead();


protected:
    int mNo;//编号 1：虫 2：奇美拉 3：大强
    bool mMoveDir = 0;
    bool mFaceDir = 0;
    Player* mPlayer;
    int mHP;
    int mAttackPoint;
    qreal mSpeed;
    int expDropped;

    QTimer* skillTimer = nullptr;

    //int cnt = 0;//神秘报错 析构函数需要为虚函数

};

#endif // ENEMYBASE_H




//enemybig.h


#ifndef ENEMYBIG_H
#define ENEMYBIG_H

#include"enemybase.h"


class enemyBig : public EnemyBase
{
public:
    enemyBig(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);

    void setMirrorPixmap();

    void startSkill();

private:

};

#endif // ENEMYBIG_H






//enemyboss.h

#ifndef ENEMYBOSS_H
#define ENEMYBOSS_H

#include"enemybase.h"

class enemyBoss : public EnemyBase
{
public:
    enemyBoss(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);

    void getHurt(int _attack);
    void enemyMove(bool dir = 0);

    void setMirrorPixmap();

    void startSkill();

private:
    int skillCnt = 0;
};

#endif // ENEMYBOSS_H




//enemybubble.h


#ifndef ENEMYBUBBLE_H
#define ENEMYBUBBLE_H

#include"enemybase.h"


class enemyBubble : public EnemyBase
{
public:
    enemyBubble(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);

    void setMirrorPixmap();

    void startSkill();

private:
    int cnt = 0;
    int skillCnt = 0;
};

#endif // ENEMYBUBBLE_H




//enemybullet.h


#ifndef ENEMYBULLET_H
#define ENEMYBULLET_H

#include"bullet.h"
#include"enemybubble.h"
#include"enemyboss.h"

class enemyBullet : public Bullet
{
public:
    enemyBullet(EnemyBase *_owner,BulletDir _dir,int _Attack, qreal _speed = 8,int _type = 0);

private:
    EnemyBase* mOwner;
    int type = 0;
};

#endif // ENEMYBULLET_H



//enemychimera.h

#ifndef ENEMYCHIMERA_H
#define ENEMYCHIMERA_H

#include "enemybase.h"

class enemyChimera:public EnemyBase
{
public:
    enemyChimera(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);

    void setMirrorPixmap();

    void startSkill();
    //   :/roles/img/roles/chimera2.png
};

#endif // ENEMYCHIMERA_H




//enemyinsect.h

#ifndef ENEMYINSECT_H
#define ENEMYINSECT_H

#include"enemybase.h"


class enemyInsect : public EnemyBase
{
public:
    enemyInsect(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp);

    void setMirrorPixmap();

private:
         //QPixmap pix(":/roles/img/roles/chimera1.png");

};

#endif // ENEMYINSECT_H



//expball.h


#ifndef EXPBALL_H
#define EXPBALL_H
#include"gameobject.h"

class ExpBall : public GameObject
{
public:
    ExpBall(int _value, QPointF _pos);
    ~ExpBall() {}

    int getVal(){return expValue;}

    void expBallMove();

private:
    int expValue;
    qreal moveSpeed;
};

#endif // EXPBALL_H




//gamecontrol.h


#ifndef GAMECONTROL_H
#define GAMECONTROL_H

#include<QObject>
#include<QDebug>

class GameControl : public QObject
{
    GameControl();
    static GameControl* instance;
public:
    static GameControl* Instance()
    {
        if(instance == nullptr)
        {
            return instance = new GameControl();
        }
        return instance;
    }

    ~GameControl()
    {
        //qDebug()<<"gamecontrol released";
    }

    void EnemySummonControl(int _time);

private:
    int GameTime;

};

#endif // GAMECONTROL_H





//gamedefine.h


#ifndef GAMEDEFINE_H
#define GAMEDEFINE_H

#include<QGraphicsItem>
#include<QGraphicsScene>
#include<QGraphicsView>
#include<QDebug>
#include<QTimer>
#include<QList>
#include<QToolButton>

class GameDefine
{
    GameDefine();
public:

    static const int GameViewUpdateTime = 10;
    static const int TotalItemNum = 24;//物品总数
    static const int InvincibleTime = 500;//无敌时间
    static const int GameTime = 300;//游戏总时间
    static const int OriginalAttackInterval = 800;//初始射击间隔
    static const int LimitedAttackInterval = 200;//最低射击间隔

};

#endif // GAMEDEFINE_H






//gameobject.h


#ifndef GAMEOBJECT_H
#define GAMEOBJECT_H

#include <QGraphicsPixmapItem>
#include <QObject>
#include<QDebug>

class GameObject : public QGraphicsPixmapItem,public QObject
{

public:
    explicit GameObject(QObject *parent = nullptr);
    ~GameObject();

    QPointF getCenterPos();//获取中心位置

};

#endif // GAMEOBJECT_H



//gamewidget.h



#ifndef GAMEWIDGET_H
#define GAMEWIDGET_H

#include <QWidget>
#include<QKeyEvent>
#include<QMouseEvent>
#include<QList>
#include<QProgressBar>
#include<QLabel>
#include<QCursor>
#include<QApplication>
#include "gamedefine.h"
#include"player.h"
#include"mybutton.h"
#include"myselectivebutton.h"
#include"bullet.h"
#include"enemybullet.h"
#include"enemyinsect.h"
#include"enemychimera.h"
#include"enemybig.h"
#include"enemybubble.h"
#include"enemyboss.h"
#include"expball.h"
#include<QLCDNumber>
#include<mygraphicsview.h>
#include<QMediaPlayer>
#include<QAudioOutput>

QT_BEGIN_NAMESPACE
namespace Ui {
class GameWidget;
}
QT_END_NAMESPACE

class GameWidget : public QWidget
{
    Q_OBJECT

public:
    GameWidget(QWidget *parent = nullptr);
    ~GameWidget();

    void Init_Start();
    void Init_Game();
    void restartGame();
    void setTimer();
    void startTimer();
    void stopTimer();
    void GameWin();
    void GameOver();

    bool isRunning = 0;//游戏是否进行中
    bool isChoosing = 0;//是否在选择物品
    bool isStopped = 0;//是否按暂停
    bool isPressed = 0;//鼠标是否按住

    //背景音乐
    QMediaPlayer *BGMplayer = nullptr;
    QAudioOutput *BGMOutput = nullptr;

    //胜利音乐
    QMediaPlayer *WinBGMplayer = nullptr;
    QAudioOutput *WinBGMOutput = nullptr;

    //按钮音效
    QMediaPlayer *ButtonAudioplayer = nullptr;
    QAudioOutput *ButtonAudioOutput = nullptr;

    //升级音效
    QMediaPlayer *LevelUPAudioplayer = nullptr;
    QAudioOutput *LevelUPAudioOutput = nullptr;

    //选择按钮
    mySelectiveButton* optBtn1 = nullptr;
    mySelectiveButton* optBtn2 = nullptr;
    mySelectiveButton* optBtn3 = nullptr;
    int opt1 = 0,opt2 = 0,opt3 = 0;

    void resetHPBar();//重置血条

    QLCDNumber* getGameTime(){return gameClock;}


    void playerMove();

    void keyPressEvent(QKeyEvent* event);
    void keyReleaseEvent(QKeyEvent* event);
    void mousePressEvent(QMouseEvent *event);
    void mouseMoveEvent(QMouseEvent *event);
    void mouseReleaseEvent(QMouseEvent *event);
    QPointF playerBulletDir = QPointF(1,0);

    //生成怪物
    void enemySummon(int _HP, int _Attack, qreal _Speed,int _exp, int _No);

    void player_enemyCollision();//玩家与敌人碰撞检测
    void bullet_enemyCollision();//子弹碰撞检测
    void bullet_playerCollision();//玩家与子弹碰撞
    void releaseOutBullet();//清除出界子弹
    void releaseOutEnemyBullet();
    void getExp();//玩家获取经验

    QGraphicsScene &getGameScene();
    Player* getPlayer();

    static GameWidget* widget;


    QList<Bullet*> mBulletList;//玩家子弹列表
    QList<enemyBullet*> mEnemyBulletList;//怪物子弹列表
    //QList<int> mBulletDirList;//子弹方向
    QList<EnemyBase*> mEnemyList;//怪物列表
    QList<ExpBall*> mExpBallList;//经验球列表

signals:
    void isSelected();//完成选择

private:
    Ui::GameWidget *ui;



    myGraphicsView mGameView; //视图
    QGraphicsScene mStartScene;//开始场景
    QGraphicsScene mGameScene;//游戏场景
    QGraphicsScene mWinScene;//胜利场景
    QGraphicsScene mOverScene;//结束场景

    Player mPlayer;

    myButton* startBtn = nullptr;//开始按钮
    myButton* exitBtn = nullptr;//退出按钮
    myButton* detailBtn = nullptr;
    myButton* backBtn = nullptr;//返回主页
    myButton* restartBtn = nullptr;//再玩一次
    myButton* continueBtn = nullptr;//继续游戏
    GameObject* winText = nullptr;
    GameObject* loseText = nullptr;

    int beginTimes = 0;//开始次数


    myButton* pauseBTN;
    GameObject* grayBackground = nullptr;
    //倒计时
    QLCDNumber* gameClock;
    QTimer* standardTimer;
    //左上角信息
    QProgressBar* experienceBar;
    QProgressBar* HPBar;
    QLabel* LevelLabel;

    //属性栏
    QGraphicsPixmapItem mProperties;
    QLabel* HPlabel;
    QLabel* HPRecoverylabel;
    QLabel* HPPlunderlabel;
    QLabel* AttackRatiolabel;
    QLabel* AttackPointlabel;
    QLabel* AttackSpeedlabel;
    QLabel* Defencelabel;
    QLabel* SpeedRatiolabel;
    QLabel* EXPRatiolabel;

    void setProperties();
    void resetProperties();//重置属性

    //定时器
    QTimer* playerMoveTimer;
    QTimer* playerUpdateTimer;//角色动画
    QTimer* playerShootTimer;
    QTimer* bulletMoveTimer;

    QTimer* BGMTimer;

    QTimer* enemyMoveTimer;//怪物移动

    QList<int> mKeyList;


};
#endif // GAMEWIDGET_H







//mybutton.h


// mybutton.h
#ifndef MYBUTTON_H
#define MYBUTTON_H

#include <QToolButton>
#include <QEvent>
#include <QEnterEvent>

class myButton : public QToolButton
{
    Q_OBJECT
public:
    explicit myButton(QWidget *parent = nullptr);
    ~myButton();

protected:
    void enterEvent(QEnterEvent *event) override;
    void leaveEvent(QEvent *event) override;
};

#endif // MYBUTTON_H





//mydialog.h



#ifndef MYDIALOG_H
#define MYDIALOG_H

#include <QDialog>
#include<QGraphicsView>
#include<QGraphicsScene>

class myDialog : public QDialog
{
public:
    myDialog(QWidget *parent = nullptr);

private:
    QGraphicsView view;
    QGraphicsScene scene;
};

#endif // MYDIALOG_H





//mygraphicsview.h


#ifndef MYGRAPHICSVIEW_H
#define MYGRAPHICSVIEW_H

#include <QGraphicsView>
#include <QMouseEvent>

class myGraphicsView : public QGraphicsView
{
    Q_OBJECT
public:
    explicit myGraphicsView(QWidget *parent = nullptr);

protected:
    void mousePressEvent(QMouseEvent *event) override;
    void mouseMoveEvent(QMouseEvent *event) override;
    void mouseReleaseEvent(QMouseEvent *event) override;

signals:
    void mousePressed(const QPointF &scenePos);
    void mouseMoved(const QPointF &scenePos);
    void mouseReleased(const QPointF &scenePos);
};

#endif // MYGRAPHICSVIEW_H




// myselectivebutton.h
#ifndef MYSELECTIVEBUTTON_H
#define MYSELECTIVEBUTTON_H

#include <QToolButton>
#include <QEvent>
#include <QEnterEvent>

class mySelectiveButton : public QToolButton
{
    Q_OBJECT
public:
    explicit mySelectiveButton(int _itemNo, QWidget *parent = nullptr);
    ~mySelectiveButton();

protected:
    void enterEvent(QEnterEvent *event) override;
    void leaveEvent(QEvent *event) override;

private:
    int itemNo;
};

#endif // MYSELECTIVEBUTTON_H




//player.h
#ifndef PLAYER_H
#define PLAYER_H

#include"gameobject.h"
#include<QMediaPlayer>
#include<QAudioOutput>

class Player : public GameObject
{
    Q_OBJECT
public:
    Player();

    void picUpdate();

    int getHP(){return mHP;}
    int getMaxHP(){return maxHP;}
    qreal getSpeed(){return mSpeed;}
    QPointF getPos();
    int getAttackInterval();
    int getHPRecovery(){return mHPRecovery;}
    int getRecoveryInterval();
    void HPRecoverControl();
    void HPRecover();
    qreal getHPPlunder(){return mHPPlunder;}
    void canPlunder();//判断吸血
    int getAttackPoint(){return mAttackPoint;}
    int getDefence(){return mDefence;}
    qreal getAttackRatio(){return mAttackRatio;}
    int getAttackSpeed(){return mAttackSpeed;}
    qreal getSpeedRatio(){return mSpeedRatio;}
    qreal getEXPRatio(){return mEXPratio;}
    int getRecessionIndex(){return recessionIndex;}
    int getBloodAttack(){return bloodAttack;}


    void playerShoot(QPointF _dir);
    //void shootSound();

    //音效
    QMediaPlayer *SFXshoot = nullptr;
    QAudioOutput *audiooutputShoot = nullptr;
    QMediaPlayer *SFXhurt = nullptr;
    QAudioOutput *audiooutputHurt = nullptr;

    void setFaceDir(bool _fac);
    bool getFaceDir(){return faceDir;}

    void getHurt(int _attack);
    void PlayerGetExp(int _val);
    int getPlayerExp(){return mExp;}
    int getPlayerLevel(){return mLevel;}
    void LevelBeUp(){mLevel ++; mExp -= 100;mHP++;maxHP++;}
    void getItem(int num);

    static int pixStatus;//0,1,2

    bool isInvincible = 0;//是否无敌
    QTimer* InvincibleTimer = nullptr;

    void resetPlayer();//重置角色

signals:
    void getExp();
    void LevelUp();
    void isHurt();
    void isDead();

private:
    qreal mSpeed;
    bool faceDir;//0->left 1->right
    int mHP;
    int maxHP;
    int mExp;
    int mLevel;
    int mHPRecovery;
    qreal mHPPlunder;
    int mAttackPoint;//攻击力
    int mDefence;//防御力
    qreal mAttackRatio;//攻击倍率
    int mAttackSpeed;//攻击速度
    qreal mSpeedRatio;//移速加成
    qreal mEXPratio;//经验倍率

    int mBulletNum = 1;//子弹个数
    int mExtraBullet = 0;//额外子弹

    int InvincibleTimes = 0;//无敌次数
    int recessionIndex = 0;//击退系数
    int bloodAttack = 0;



    QTimer* HPRecoveryTimer;



};

#endif // PLAYER_H





//playerbullet.h



#ifndef PLAYERBULLET_H
#define PLAYERBULLET_H

#include"bullet.h"
#include"player.h"
class playerBullet : public Bullet
{
public:
    playerBullet(Player *_player,QPointF _dir,int _Attack, qreal _speed = 8);
    playerBullet(Player *_player,BulletDir _dir,int _Attack, qreal _speed = 8);
    ~playerBullet()
    {
        //if(pix != nullptr) delete pix;
        //qDebug() << "pix released";
    }


private:
    //QPixmap* pix = new QPixmap(":/icons/img/bulletsample.png");
    Player* mPlayer;


    void PlaySound();

};

#endif // PLAYERBULLET_H







//bullet.cpp


#include "bullet.h"

Bullet::Bullet() {}

Bullet::Bullet(GameObject* _owner)
{
    mOwner = _owner;
}

void Bullet::BulletMove()
{
    switch(mDir)
    {
    case DirN:this->moveBy(0,-getSpeed());break;
    case DirS:this->moveBy(0,getSpeed());break;
    case DirW:this->moveBy(-getSpeed(),0);break;
    case DirE:this->moveBy(getSpeed(),0);break;
    case DirNW:this->moveBy(-getSpeed()/sqrt(2),-getSpeed()/sqrt(2));break;
    case DirNE:this->moveBy(getSpeed()/sqrt(2),-getSpeed()/sqrt(2));break;
    case DirSW:this->moveBy(-getSpeed()/sqrt(2),getSpeed()/sqrt(2));break;
    case DirSE:this->moveBy(getSpeed()/sqrt(2),getSpeed()/sqrt(2));break;
    case MouseDir:
    {
        this->moveBy(getSpeed()*getMoveDir().x(),getSpeed()*getMoveDir().y());
    }
    }
    this->show();
}



//enemybase.cpp


#include "enemybase.h"


EnemyBase::EnemyBase(GameObject *parent)
    : GameObject{parent}
{}

EnemyBase::~EnemyBase()
{

}

EnemyBase::EnemyBase(Player* _player, int _HP, int _AttackPoint, qreal _Speed,int _exp)
{
    mPlayer = _player;
    mHP = _HP;
    mAttackPoint = _AttackPoint;
    mSpeed = _Speed;
    expDropped = _exp;
}

void EnemyBase::setMirrorPixmap()
{
    //:/roles/img/roles/chimera1.png
    QString address = ":/roles/img/roles/chimera";
    address += QString::number(mNo);
    if(mMoveDir == mFaceDir) return;
    if(mMoveDir  && !mFaceDir)
    {
        address += "-mir";
        mFaceDir = 1;
    }
    else mFaceDir = 0;
    address += ".png";
    this->setPixmap(QPixmap(address));

}

void EnemyBase::getHurt(int _attack)
{
    mHP -= _attack;
    if(mPlayer->getBloodAttack())
    {
        mHP *= pow(0.95,mPlayer->getBloodAttack());
    }
    if(mPlayer->getRecessionIndex())
    {
        int times = mPlayer->getRecessionIndex()*10;
        for(int i=0;i<times;i++)
            enemyMove(1);
    }
}



void EnemyBase::enemyMove(bool dir)
{
    QPointF playerPos = mPlayer->getCenterPos();
    QPointF moveDir = playerPos - this->getCenterPos();
    qreal _x = moveDir.x();
    qreal _y = moveDir.y();
    _x = QString::number(_x,'f',2).toDouble();
    _y = QString::number(_y,'f',2).toDouble();
    if(_x >= 0) setDir(1);
    else setDir(0);
    qreal _r = qSqrt(qPow(_x,2) + qPow(_y,2));
    if(_r == 0) return;
    //保留两位小数
    _r = QString::number(_r,'f',2).toDouble();
    qreal vx = _x/_r * mSpeed;
    qreal vy = _y/_r * mSpeed;
    if(!dir)
        this->moveBy(vx,vy);
    else
        this->moveBy(-vx/mSpeed,-vy/mSpeed);
}

void EnemyBase::startSkill()
{

}





//enemybig.cpp



#include "enemybig.h"
#include"gamewidget.h"

enemyBig::enemyBig(Player *_player, int _HP, int _AttackPoint, qreal _Speed, int _exp)
    :EnemyBase(_player,_HP,_AttackPoint,_Speed,_exp)
{
    this->setPixmap(QPixmap(":/roles/img/roles/chimera3.png"));
    this->setScale(0.14);
    mNo = 3;

    skillTimer = new QTimer(this);

    skillTimer->start(2000);
    connect(skillTimer,&QTimer::timeout,this,&enemyBig::startSkill);

    //设置特效音
    SFXplayer = new QMediaPlayer(this);
    audiooutput = new QAudioOutput(this);
    SFXplayer->setAudioOutput(audiooutput);
    SFXplayer->setSource(QUrl("qrc:/sfx/sounds/bigSFX.MP3"));
}

void enemyBig::setMirrorPixmap()
{
    EnemyBase::setMirrorPixmap();
}

void enemyBig::startSkill()
{
    if(!GameWidget::widget->isRunning) return ;
    //qDebug() << "skill start";
    if(scale()<0.5)
    {
        mSpeed *= 1.2;
        mAttackPoint *= 1.3;
        mHP /= 2;
        setScale(scale() + 0.03);
        if(mHP == 0) mHP = 1;
    }
    SFXplayer->play();
}





//enemyboss.cpp


#include "enemyboss.h"
#include"gamewidget.h"
#include"enemybullet.h"

enemyBoss::enemyBoss(Player *_player, int _HP, int _AttackPoint, qreal _Speed, int _exp)
    :EnemyBase(_player,_HP,_AttackPoint,_Speed,_exp)
{
    this->setPixmap(QPixmap(":/roles/img/roles/chimera5.png"));
    this->setScale(0.2);
    mNo = 5;

    skillTimer = new QTimer(this);

    skillTimer->start(1500);
    connect(skillTimer,&QTimer::timeout,this,&enemyBoss::startSkill);

    //设置特效音
    SFXplayer = new QMediaPlayer(this);
    audiooutput = new QAudioOutput(this);
    SFXplayer->setAudioOutput(audiooutput);
    SFXplayer->setSource(QUrl("qrc:/sfx/sounds/bossSFX.ogg"));
}

void enemyBoss::getHurt(int _attack)
{
    EnemyBase::getHurt(_attack);
    mSpeed += 0.02;
}

void enemyBoss::enemyMove(bool dir)
{
    if(dir) return;
    if(y() == 100)
    {
        setDir(1);
        moveBy(mSpeed,0);
        if(x()>790) this->setX(790);
    }
    if(x() == 790)
    {
        setDir(0);
        moveBy(0,mSpeed);
        if(y()>580) this->setY(580);
    }
    if(y() == 580)
    {
        setDir(0);
        moveBy(-mSpeed,0);
        if(x()<0) this->setX(0);
    }
    if(x() == 0)
    {
        setDir(1);
        moveBy(0,-mSpeed);
        if(y()<100) this->setY(100);
    }
}

void enemyBoss::setMirrorPixmap()
{
    EnemyBase::setMirrorPixmap();
}

void enemyBoss::startSkill()
{
    if(!GameWidget::widget->isRunning) return ;
    //qDebug()<<"skill";
    int _attack =  GameWidget::widget->getPlayer()->getMaxHP() * mAttackPoint * mSpeed ;//攻击力计算
    qreal _speed = 6 * pow(1.1,skillCnt) > 12 ? 12 : 6 * pow(1.1,skillCnt);
    for(int i=0;i<1;i++)
    {
        auto* enemyBT = new enemyBullet(this,Bullet::MouseDir,_attack,_speed,1);
        GameWidget::widget->getGameScene().addItem(enemyBT);
        GameWidget::widget->mEnemyBulletList.append(enemyBT);
    }
    SFXplayer->play();
    skillCnt++;
}





//enemybubble.cpp



#include "enemybubble.h"
#include "gamewidget.h"
#include "enemybullet.h"

enemyBubble::enemyBubble(Player* _player, int _HP, int _AttackPoint, qreal _Speed, int _exp)
    :EnemyBase(_player,_HP,_AttackPoint,_Speed,_exp)
{
    this->setPixmap(QPixmap(":/roles/img/roles/chimera4.png"));
    this->setScale(0.15);
    mNo = 4;

    //mCount = 1;

    skillTimer = new QTimer(this);
    skillTimer->start(400);

    connect(skillTimer,&QTimer::timeout,[this](){
        cnt++;
        cnt %= 10;
        if(cnt == 3) this->startSkill();
        if(cnt >= 3 && cnt<=4)
            this->setPixmap(QPixmap(":/roles/img/roles/chimera4-mir.png"));
        else
            this->setPixmap(QPixmap(":/roles/img/roles/chimera4.png"));
    });

    //设置特效音
    SFXplayer = new QMediaPlayer(this);
    audiooutput = new QAudioOutput(this);
    audiooutput->setVolume(1.4);
    SFXplayer->setAudioOutput(audiooutput);
    SFXplayer->setSource(QUrl("qrc:/sfx/sounds/bubbleSFX.MP3"));

}

void enemyBubble::setMirrorPixmap()
{

}

void enemyBubble::startSkill()
{
    if(!GameWidget::widget->isRunning) return ;
    //qDebug()<<"skill";
    int _attack =  getAttackPoint() ;//攻击力计算
    for(int i=0;i<7;i++)
    {
        auto* enemyBT = new enemyBullet(this,Bullet::BulletDir(i),_attack * pow(1.1,skillCnt) ,5 * pow(1.1,skillCnt));
        enemyBT->setScale(0.5 * pow(1.1,skillCnt));
        GameWidget::widget->getGameScene().addItem(enemyBT);
        GameWidget::widget->mEnemyBulletList.append(enemyBT);
    }
    skillCnt++;
    SFXplayer->play();
}






//enemybullet.cpp


#include "enemybullet.h"
#include"gamewidget.h"

enemyBullet::enemyBullet(EnemyBase *_owner, BulletDir _dir, int _Attack, qreal _speed,int _type)
{
    mOwner = _owner;
    mAttackPoint = _Attack;
    //qDebug()<<mAttackPoint;
    mSpeed = _speed;
    type = _type;

    if(type == 0)
    {
        this->setPixmap(QPixmap(":/icons/img/enemybulletsample.png"));
        this->setScale(0.5);
    }
    else if(type == 1)
    {
        QPointF _Dir = GameWidget::widget->getPlayer()->getCenterPos() - mOwner->getCenterPos();
        qreal _x = _Dir.x();
        qreal _y = _Dir.y();
        _x = QString::number(_x,'f',2).toDouble();
        _y = QString::number(_y,'f',2).toDouble();
        qreal _r = qSqrt(qPow(_x,2) + qPow(_y,2));
        if(_r == 0) return;
        //保留两位小数
        _r = QString::number(_r,'f',2).toDouble();
        qreal dx = _x/_r;
        qreal dy = _y/_r;
        dx = QString::number(dx,'f',2).toDouble();
        dy = QString::number(dy,'f',2).toDouble();

        moveDir = QPointF(dx,dy);
        this->setPixmap(QPixmap(":/icons/img/bomb.png"));
        this->setScale(0.2);
    }
    mPos = mOwner->getCenterPos() - QPointF(this->pixmap().width()*scale()/2,this->pixmap().height()*scale()/2);
    this->setPos(mPos);


    mDir = _dir;
}





//enemychimera.cpp



#include "enemychimera.h"
#include "gamewidget.h"

enemyChimera::enemyChimera(Player *_player, int _HP, int _AttackPoint, qreal _Speed, int _exp)
    :EnemyBase(_player,_HP,_AttackPoint,_Speed,_exp)
{
    this->setPixmap(QPixmap(":/roles/img/roles/chimera2.png"));
    this->setScale(0.18);
    //expDropped = 50;
    mNo = 2;

    skillTimer = new QTimer(this);

    skillTimer->start(3000);
    connect(skillTimer,&QTimer::timeout,this,&enemyChimera::startSkill);
    // connect(GameWidget::widget,&GameWidget::gamePause,skillTimer,&QTimer::stop);
    // connect(GameWidget::widget,&GameWidget::gameContinue,[this](){
    //     skillTimer->start(3000);
    // });

    //设置特效音
    SFXplayer = new QMediaPlayer(this);
    audiooutput = new QAudioOutput(this);
    audiooutput->setVolume(0.8);
    SFXplayer->setAudioOutput(audiooutput);
    SFXplayer->setSource(QUrl("qrc:/sfx/sounds/chimeraSFX.MP3"));

}

void enemyChimera::setMirrorPixmap()
{
    EnemyBase::setMirrorPixmap();
}

void enemyChimera::startSkill()
{
    if(!GameWidget::widget->isRunning) return ;
    for(int i=0;i<50;i++)
    {
        this->enemyMove();
    }
    SFXplayer->play();
}





//enemyinsect.cpp


#include "enemyinsect.h"
//#include "gamewidget.h"


enemyInsect::enemyInsect(Player *_player, int _HP, int _AttackPoint, qreal _Speed,int _exp)
    :EnemyBase(_player,_HP,_AttackPoint,_Speed,_exp)
{
    this->setPixmap(QPixmap(":/roles/img/roles/chimera1.png"));
    this->setScale(0.15);
    //expDropped = 33;
    mNo = 1;
}

void enemyInsect::setMirrorPixmap()
{
    EnemyBase::setMirrorPixmap();
}





//expball


#include "expball.h"
#include "gamewidget.h"

ExpBall::ExpBall(int _value, QPointF _pos)
{
    expValue = _value;
    this->setPixmap(QPixmap(":/icons/img/expball.png"));
    this->setScale(0.1);
    this->setPos(_pos);

    moveSpeed = 5;
}

void ExpBall::expBallMove()
{
    QPointF playerPos = GameWidget::widget->getPlayer()->getCenterPos();
    QPointF moveDir = playerPos - this->getCenterPos();
    qreal _x = moveDir.x();
    qreal _y = moveDir.y();
    _x = QString::number(_x,'f',2).toDouble();
    _y = QString::number(_y,'f',2).toDouble();
    qreal _r = qSqrt(qPow(_x,2) + qPow(_y,2));
    if(_r == 0) return;
    //保留两位小数
    _r = QString::number(_r,'f',2).toDouble();
    qreal vx = _x/_r * moveSpeed;
    qreal vy = _y/_r * moveSpeed;
    this->moveBy(vx,vy);
}





//gamecontrol.cpp


#include "gamecontrol.h"
#include"gamewidget.h"


GameControl::GameControl() {
    setParent(GameWidget::widget);//链接对象树 以便正常析构
}

GameControl* GameControl::instance = nullptr;//重要！类外初始化

void GameControl::EnemySummonControl(int _time)
{
    GameTime = _time;
    //if(GameTime == 299) GameWidget::widget->enemySummon(10000,0,1,100,5);
    if(GameTime > 270)//游戏前30s发育期
    {
        //生命 攻击 速度 经验 种类
        for(int i=0;i<QRandomGenerator::global()->bounded(1,3);i++)
            GameWidget::widget->enemySummon(1,1,0.7,QRandomGenerator::global()->bounded(5,16),1);
    }
    else if(GameTime > 240)//30s~60s 奇美拉出场
    {
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(5,1,0.8,QRandomGenerator::global()->bounded(5,12),1);}

        if(GameTime %3 == 1)
            GameWidget::widget->enemySummon(6,2,0.9,QRandomGenerator::global()->bounded(5,14),2);
    }
    else if(GameTime > 210)//60s~90s 大强出场
    {

        GameWidget::widget->enemySummon(10,2,1.3,QRandomGenerator::global()->bounded(3,7),1);
        if(GameTime %4 == 0)
        {
            GameWidget::widget->enemySummon(80,3,1.2,QRandomGenerator::global()->bounded(4,8),3);
        }
        if (GameTime %4 == 1)
        {
            GameWidget::widget->enemySummon(14,4,1.4,QRandomGenerator::global()->bounded(4,8),2);
        }
        // if (GameTime %3 == 2)
        // {
        //     for(int i=0;i<QRandomGenerator::global()->bounded(1,3);i++)
        //         GameWidget::widget->enemySummon(10,2,1.3,QRandomGenerator::global()->bounded(3,7),1);
        // }
    }
    else if(GameTime > 180)//90s~120s 泡泡怪出场
    {
        if(GameTime % 5 == 0)
        {
            GameWidget::widget->enemySummon(70,3,0.3,QRandomGenerator::global()->bounded(12,20),4);
        }
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,4);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(20,3,1.2,QRandomGenerator::global()->bounded(8,14),1);
        }
        if(GameTime % 5 == 1)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(22,3,1.6,QRandomGenerator::global()->bounded(8,16),2);
        }
    }
    else if(GameTime > 150)//120s~150s 挑战大怪
    {
        if(GameTime % 6 == 0)
        {
            GameWidget::widget->enemySummon(150,12,0.4,QRandomGenerator::global()->bounded(25,30),4);
        }
        if(GameTime %3 == 0)
        {
            GameWidget::widget->enemySummon(300,8,1.2,QRandomGenerator::global()->bounded(15,20),3);
        }
        else if(GameTime %3 == 1)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(30,4,1.6,QRandomGenerator::global()->bounded(8,16),1);
        }
    }
    else if(GameTime > 120)//150s~180s 第二轮怪潮
    {
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,4);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(34,6,1.2,QRandomGenerator::global()->bounded(8,14),1);
        }
        else if(GameTime %3 == 1)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(36,8,1.8,QRandomGenerator::global()->bounded(6,12),2);
        }
        if(GameTime %5 == 0)
            GameWidget::widget->enemySummon(200,18,0.4,QRandomGenerator::global()->bounded(6,12),4);
    }
    else if(GameTime > 90)//180s~210s 大怪围攻 产生第一个boss
    {
        if(GameTime == 120) GameWidget::widget->enemySummon(3000,1,1,100,5);
        if(GameTime %3 == 0)
        {
            GameWidget::widget->enemySummon(600,12,1.3,QRandomGenerator::global()->bounded(8,12),3);
        }
        else if(GameTime %3 == 1)
        {
            int x = QRandomGenerator::global()->bounded(1,4);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(60,16,1.2,QRandomGenerator::global()->bounded(7,10),1);
        }
        if(GameTime % 5 == 0)
            GameWidget::widget->enemySummon(300,32,0.4,QRandomGenerator::global()->bounded(8,14),4);
    }
    else if(GameTime > 60)//210s~240s 缓冲时间
    {
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(80,4,1.8,QRandomGenerator::global()->bounded(8,14),2);
        }
        if(GameTime % 5 == 0)
            GameWidget::widget->enemySummon(400,10,0.4,QRandomGenerator::global()->bounded(8,14),4);
    }
    else if(GameTime > 30)//240s~270s 第三轮怪潮 产生第二个boss
    {
        if(GameTime == 60) GameWidget::widget->enemySummon(10000,2,1,100,5);
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(70,8,2,QRandomGenerator::global()->bounded(6,10),2);
        }
        else if(GameTime %3 == 1)
        {
            GameWidget::widget->enemySummon(400,10,1.5,QRandomGenerator::global()->bounded(6,10),3);
        }
        else if(GameTime %3 == 2)
        {
            GameWidget::widget->enemySummon(90,10,0.5,QRandomGenerator::global()->bounded(6,10),4);
        }
    }
    else //最后30s 最后冲击
    {
        if(GameTime %3 == 0)
        {
            int x = QRandomGenerator::global()->bounded(1,4);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(120,8,2,QRandomGenerator::global()->bounded(6,10),2);
        }
        else if(GameTime %3 == 1)
        {
            int x = QRandomGenerator::global()->bounded(1,3);
            for(int i=0;i<x;i++)
                GameWidget::widget->enemySummon(800,20,1.5,QRandomGenerator::global()->bounded(6,10),3);
        }
        else if(GameTime %3 == 2)
        {
            GameWidget::widget->enemySummon(400,20,0.5,QRandomGenerator::global()->bounded(6,10),4);
        }
    }
}







//gamedefine.cpp


#include "gamedefine.h"

GameDefine::GameDefine() {}







//gameobject.cpp



#include "gameobject.h"

GameObject::GameObject(QObject *parent)
    :QObject(parent)
{}

GameObject::~GameObject()
{
    //qDebug()<<"gameobject deleted";
}


QPointF GameObject::getCenterPos()
{
    return QPointF(pos().x()+(pixmap().width()*scale()/2),pos().y()+(pixmap().height()*scale()/2));
}





//gamewidget.cpp


#include "gamewidget.h"
#include "ui_gamewidget.h"
#include"gamecontrol.h"
#include"mydialog.h"

GameWidget* GameWidget::widget = nullptr;

GameWidget::GameWidget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::GameWidget)
{
    ui->setupUi(this);
    widget =this;
    setWindowTitle("Chiikawaおっきい营养大冒险");
    setWindowIcon(QIcon(":/icons/img/windowicon.png"));
    setFixedSize(900, 700);

    mGameView.setParent(this);
    mGameView.setSceneRect(QRect(0,0,900,700));



    this->Init_Start();


}

GameWidget::~GameWidget()
{
    delete ui;
    //qDebug()<<"widget released";
}

void GameWidget::Init_Start()
{
    mStartScene.setSceneRect(QRect(0,0,900,700));
    //设置背景图
    mStartScene.addPixmap(QPixmap(":/backgrouds/img/StartBackground.png"));


    //按钮音效
    ButtonAudioplayer = new QMediaPlayer(this);
    ButtonAudioOutput = new QAudioOutput(this);
    ButtonAudioplayer->setAudioOutput(ButtonAudioOutput);
    ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.mp3"));

    //开始按钮
    startBtn = new myButton(this);
    startBtn->setAutoRaise(true);
    startBtn->setFixedSize(182,52);
    startBtn->setIcon(QIcon(":/ui/img/ui/startBtn.png"));
    startBtn->setIconSize(QSize(182,52));
    startBtn->move(100,140);

    //记录按钮
    detailBtn = new myButton(this);
    detailBtn->setAutoRaise(true);
    detailBtn->setFixedSize(182,52);
    detailBtn->setIcon(QIcon(":/ui/img/ui/detailBtn.png"));
    detailBtn->setIconSize(QSize(182,52));
    detailBtn->move(100,200);

    connect(detailBtn,&QToolButton::clicked,[this](){
        ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.mp3"));
        ButtonAudioplayer->play();
        myDialog details(this);
        details.exec();
    });

    //退出按钮
    exitBtn = new myButton(this);
    exitBtn->setAutoRaise(true);
    exitBtn->setFixedSize(182,52);
    exitBtn->setIcon(QIcon(":/ui/img/ui/exitBtn.png"));
    exitBtn->setIconSize(QSize(182,52));
    exitBtn->move(100,300);

    connect(exitBtn,&QToolButton::clicked,[this](){
        close();
    });

    //返回主页按钮
    backBtn = new myButton(this);
    backBtn->setAutoRaise(true);
    backBtn->setFixedSize(182,52);
    backBtn->setIcon(QIcon(":/ui/img/ui/backBtn.png"));
    backBtn->setIconSize(QSize(182,52));
    backBtn->move(600,200);
    backBtn->hide();

    connect(backBtn,&QToolButton::clicked,[this](){
        pauseBTN->hide();
        ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.mp3"));
        ButtonAudioplayer->play();
        WinBGMplayer->stop();
        GameOver();
        mGameView.setScene(&mStartScene);
        startBtn->show();
        detailBtn->show();
        restartBtn->hide();
        exitBtn->move(100,300);
        backBtn->hide();
    });


    //重新开始按钮
    restartBtn = new myButton(this);
    restartBtn->setAutoRaise(true);
    restartBtn->setFixedSize(182,52);
    restartBtn->setIcon(QIcon(":/ui/img/ui/onceMoreBtn.png"));
    restartBtn->setIconSize(QSize(182,52));
    restartBtn->hide();

    connect(restartBtn,&QToolButton::clicked,[this](){
        ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.mp3"));
        ButtonAudioplayer->play();
        WinBGMplayer->stop();
        restartGame();
        continueBtn->hide();
        restartBtn->hide();
        backBtn->hide();
    });

    //点击按钮后加载游戏场景
    connect(startBtn,&QToolButton::clicked,[this](){
        //加载游戏场景
        ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.mp3"));
        ButtonAudioplayer->play();
        if(beginTimes == 0)
        {
            Init_Game();
            startBtn->hide();
            detailBtn->hide();
            exitBtn->hide();
        }
        else
        {
            restartGame();
        }
        beginTimes++;
    });



    mGameView.setScene(&mStartScene);
    mGameView.show();

}

void GameWidget::Init_Game()
{


    //设置图片
    mGameScene.setSceneRect(QRect(0,0,900,700));
    mGameScene.addPixmap(QPixmap(":/backgrouds/img/GameBackground.png"));

    mPlayer.setScale(0.15);
    mPlayer.setPos(200,200);
    mPlayer.setZValue(1);
    mGameScene.addItem(&mPlayer);

    //设置光标
    QCursor cursor(QPixmap(":/icons/img/cursor.png"));
    QApplication::setOverrideCursor(cursor);


    //游戏背景音乐

    BGMplayer = new QMediaPlayer(this);
    BGMOutput = new QAudioOutput(this);
    BGMplayer->setAudioOutput(BGMOutput);
    BGMplayer->setSource(QUrl("qrc:/bgm/sounds/gameBGM.MP3"));
    //audiooutput->setVolume(0.2);
    BGMplayer->play();

    BGMTimer = new QTimer(this);
    BGMTimer->start(32000);
    connect(BGMTimer,&QTimer::timeout,[this](){
        BGMplayer->setSource(QUrl("qrc:/bgm/sounds/gameBGM.MP3"));
        BGMplayer->play();
    });

    //胜利音乐配置
    WinBGMplayer = new QMediaPlayer(this);
    WinBGMOutput = new QAudioOutput(this);
    WinBGMplayer->setAudioOutput(WinBGMOutput);
    //WinBGMplayer->setSource(QUrl("qrc:/bgm/sounds/winBGM.mp3"));


    //audiooutput->setVolume(0.2);
    //升级音效
    LevelUPAudioplayer = new QMediaPlayer(this);
    LevelUPAudioOutput = new QAudioOutput(this);
    LevelUPAudioplayer->setAudioOutput(LevelUPAudioOutput);
    LevelUPAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_sfx_levelup.ogg"));

    //开启定时器
    setTimer();
    startTimer();



    mGameView.setScene(&mGameScene);


    //设置暂停按钮
    pauseBTN = new myButton(this);
    pauseBTN->move(874,0);
    pauseBTN->setFixedSize(26,26);
    pauseBTN->setIcon(QIcon(":/icons/img/pausebtn.png"));
    pauseBTN->setIconSize(QSize(26,26));
    //pauseBTN->setAutoRaise(true);
    pauseBTN->show();
    connect(pauseBTN,&QToolButton::clicked,[this](){
        ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.MP3"));
        ButtonAudioplayer->play();

        if(isChoosing)
        {
            return;
        }
        else if(!isStopped)
        {
            stopTimer();
            continueBtn->move(600,260);
            restartBtn->move(600,140);
            backBtn->move(600,200);
            grayBackground = new GameObject();
            grayBackground->setPixmap(QPixmap(":/backgrouds/img/grayBackground.png"));
            grayBackground->setZValue(1.5);
            mGameScene.addItem(grayBackground);
            continueBtn->show();
            restartBtn->show();
            backBtn->show();
            this->isStopped = !this->isStopped;
        }
        else
        {
            startTimer();
            mGameScene.removeItem(grayBackground);
            if(grayBackground != nullptr) delete grayBackground;
            continueBtn->hide();
            restartBtn->hide();
            backBtn->hide();
            this->isStopped = !this->isStopped;
        }

        //

    });


    //继续游戏按钮
    continueBtn = new myButton(this);
    continueBtn->setAutoRaise(true);
    continueBtn->setFixedSize(182,52);
    continueBtn->setIcon(QIcon(":/ui/img/ui/continueBtn.png"));
    continueBtn->setIconSize(QSize(182,52));
    continueBtn->hide();

    connect(continueBtn,&QToolButton::clicked,pauseBTN,&QToolButton::click);

    QFont font("宋体",11,75);

    //设置属性栏
    setProperties();


    //升级获得物品
    connect(&mPlayer,&Player::LevelUp,[this](){

        stopTimer();
        //BGMplayer->play();

        int x=1,y=1,z=1;
        do
        {
            x = QRandomGenerator::global()->bounded(0,GameDefine::TotalItemNum);
            y = QRandomGenerator::global()->bounded(0,GameDefine::TotalItemNum);
            z = QRandomGenerator::global()->bounded(0,GameDefine::TotalItemNum);
        }while(x==y || x== z || y==z);
        opt1 = x;
        opt2 = y;
        opt3 = z;
        if(optBtn1 != nullptr) delete optBtn1;
        if(optBtn2 != nullptr) delete optBtn2;
        if(optBtn3 != nullptr) delete optBtn3;
        optBtn1 = new mySelectiveButton(x,this);
        optBtn2 = new mySelectiveButton(y,this);
        optBtn3 = new mySelectiveButton(z,this);
        optBtn1->move(250,120);
        optBtn2->move(400,120);
        optBtn3->move(550,120);

        connect(optBtn1,&QToolButton::clicked,[this](){

            //获得道具...
            mPlayer.getItem(opt1);
            emit this->isSelected();//发送选择完毕信号 刷新数值显示
        });
        connect(optBtn2,&QToolButton::clicked,[this](){

            //获得道具...
            mPlayer.getItem(opt2);
            emit this->isSelected();
        });
        connect(optBtn3,&QToolButton::clicked,[this](){

            //获得道具...
            mPlayer.getItem(opt3);
            emit this->isSelected();
        });

        optBtn1->show();
        optBtn2->show();
        optBtn3->show();

        //选择道具后继续游戏
        connect(this,&GameWidget::isSelected,[this](){
            ButtonAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_ui_button.MP3"));
            ButtonAudioplayer->play();


            optBtn1->hide();
            optBtn2->hide();
            optBtn3->hide();
            startTimer();
        });

    });


    //连接游戏结束
    connect(&mPlayer,&Player::isDead,[this](){
        this->GameOver();
        HPlabel->hide();
        HPRecoverylabel->hide();
        HPPlunderlabel->hide();
        AttackRatiolabel->hide();
        AttackPointlabel->hide();
        AttackSpeedlabel->hide();
        Defencelabel->hide();
        SpeedRatiolabel->hide();
        EXPRatiolabel->hide();
        pauseBTN->hide();
        HPBar->hide();
        experienceBar->hide();
        LevelLabel->hide();
    });
}

void GameWidget::restartGame()
{
    mGameView.setScene(&mGameScene);
    if(isStopped)
    {
        mGameScene.removeItem(grayBackground);
        if(grayBackground != nullptr) delete grayBackground;
        backBtn->hide();
        continueBtn->hide();
        isStopped = 0;
    }
    startBtn->hide();
    detailBtn->hide();
    exitBtn->hide();

    //重置光标
    QCursor cursor(QPixmap(":/icons/img/cursor.png"));
    QApplication::setOverrideCursor(cursor);

    //重置角色
    mPlayer.resetPlayer();
    mPlayer.setPos(200,200);

    //显示信息
    pauseBTN->show();
    LevelLabel->show();
    LevelLabel->setText(" Lv:1");
    resetHPBar();
    HPBar->show();
    experienceBar->show();
    experienceBar->setValue(0);
    experienceBar->setFormat(" EXP:0/100");

    //时间重置
    gameClock->show();
    gameClock->display(GameDefine::GameTime);
    resetProperties();
    startTimer();
    BGMplayer->setSource(QUrl("qrc:/bgm/sounds/gameBGM.MP3"));
    BGMplayer->play();
    BGMTimer->start(32000);


    //清除怪物与子弹
    int enemyNum = mEnemyList.size();
    for(int i = enemyNum-1; i >= 0; i--)
    {
        //qDebug()<<"delete enemy";
        mGameScene.removeItem(mEnemyList[i]);
        if(mEnemyList[i] != nullptr) mEnemyList[i]->deleteLater();
        mEnemyList.removeOne(mEnemyList[i]);
    }
    int enemyBulletNum = mEnemyBulletList.size();
    for(int i = enemyBulletNum-1; i >= 0; i--)
    {
        mGameScene.removeItem(mEnemyBulletList[i]);
        if(mEnemyBulletList[i] != nullptr) mEnemyBulletList[i]->deleteLater();
        mEnemyBulletList.removeOne(mEnemyBulletList[i]);
    }
    int playerBulletNum = mBulletList.size();
    for(int i = playerBulletNum-1; i >= 0; i--)
    {
        mGameScene.removeItem(mBulletList[i]);
        if(mBulletList[i] != nullptr) mBulletList[i]->deleteLater();
        mBulletList.removeOne(mBulletList[i]);
    }
    int expBallNum = mExpBallList.size();
    for(int i = expBallNum-1; i >= 0; i--)
    {
        mGameScene.removeItem(mExpBallList[i]);
        if(mExpBallList[i] != nullptr) mExpBallList[i]->deleteLater();
        mExpBallList.removeOne(mExpBallList[i]);
    }

}

void GameWidget::setTimer()
{
    //设置定时器
    playerMoveTimer = new QTimer(this);
    playerShootTimer = new QTimer(this);
    bulletMoveTimer = new QTimer(this);
    playerUpdateTimer = new QTimer(this);
    //enemySummonTimer = new QTimer(this);
    enemyMoveTimer = new QTimer(this);
    connect(playerMoveTimer,&QTimer::timeout,[this](){
        playerMove();//玩家移动
        getExp();//检测获取经验
        player_enemyCollision();
    });
    connect(playerShootTimer,&QTimer::timeout,[this](){
        mPlayer.playerShoot(playerBulletDir);
        //qDebug() << playerBulletDir;
    });
    connect(bulletMoveTimer,&QTimer::timeout,[this](){
        for(auto bullet : mBulletList){
            bullet->Bullet::BulletMove();
        }
        for(auto enemyBullet : mEnemyBulletList){
            enemyBullet->Bullet::BulletMove();
        }
        //检测碰撞
        bullet_enemyCollision();
        bullet_playerCollision();
        //出界检测
        releaseOutBullet();
        releaseOutEnemyBullet();


    });
    connect(playerUpdateTimer,&QTimer::timeout,&mPlayer,&Player::picUpdate);
    // connect(enemySummonTimer,&QTimer::timeout,[this](){
    //     // enemyInsSummon();
    //     // enemyChimeraSummon();

    // });
    connect(enemyMoveTimer,&QTimer::timeout,[this](){
        //testEnemy->enemyMove();
        for(auto enemy : mEnemyList){
            enemy->enemyMove();
            enemy->setMirrorPixmap();//怪物移动与面朝方向
        }
    });

    //设置倒计时

    standardTimer = new QTimer(this);
    gameClock = new QLCDNumber(this);
    gameClock->setFixedSize(80,40);
    gameClock->move(410,35);
    gameClock->display(GameDefine::GameTime);
    gameClock->setStyleSheet("QLCDNumber{padding: 1px;"
                             "color: rgb(255,0,0);"
                             "border-style: solid;"
                             "border: 2px solid black;"
                             "border-radius: 8px;"
                             "width:50px;"
                             "background-color: rgb(255,255,255);}");

    gameClock->setSegmentStyle(QLCDNumber::Flat);

    gameClock->show();

    connect(standardTimer,&QTimer::timeout,[this](){
        int val = this->gameClock->intValue();
        GameControl::Instance()->EnemySummonControl(val);
        if(val <= 0)
        {
            stopTimer();
            GameWin();
        }
        else
        {
            this->gameClock->display(val-1);
        }

    });
}

void GameWidget::startTimer()
{

    isRunning = 1;
    //开启定时器

    playerMoveTimer->start(GameDefine::GameViewUpdateTime);
    bulletMoveTimer->start(GameDefine::GameViewUpdateTime);

    enemyMoveTimer->start(GameDefine::GameViewUpdateTime);

    //enemySummonTimer->start(3000);
    playerUpdateTimer->start(30);

    standardTimer->start(1000);

    //开启音乐
    //BGMplayer->play();
}

void GameWidget::stopTimer()
{
    isRunning = 0;
    //暂停定时器
    playerMoveTimer->stop();
    bulletMoveTimer->stop();
    //enemySummonTimer->stop();
    enemyMoveTimer->stop();
    playerShootTimer->stop();
    playerUpdateTimer->stop();

    standardTimer->stop();

    //暂停音乐
    //BGMplayer->pause();
}

void GameWidget::GameWin()
{
    stopTimer();
    WinBGMplayer->setSource(QUrl("qrc:/bgm/sounds/winBGM.mp3"));
    WinBGMplayer->play();

    BGMTimer->stop();
    BGMplayer->stop();

    pauseBTN->hide();
    HPBar->hide();
    experienceBar->hide();
    LevelLabel->hide();

    HPlabel->hide();
    HPRecoverylabel->hide();
    HPPlunderlabel->hide();
    AttackRatiolabel->hide();
    AttackPointlabel->hide();
    AttackSpeedlabel->hide();
    Defencelabel->hide();
    SpeedRatiolabel->hide();
    EXPRatiolabel->hide();
    //配置结束场景
    gameClock->hide();
    mWinScene.setSceneRect(QRect(0,0,900,700));
    mWinScene.addPixmap(QPixmap(":/backgrouds/img/gamewinBackground.png"));
    winText = new GameObject();
    winText->setPixmap(QPixmap(":/ui/img/ui/winText.png"));
    winText->setScale(0.4);
    mWinScene.addItem(winText);
    continueBtn->hide();
    restartBtn->show();
    restartBtn->move(100,100);
    backBtn->show();
    backBtn->move(100,160);
    exitBtn->show();
    exitBtn->move(100,220);

    //重置光标
    QCursor cursor;
    cursor.setShape(Qt::ArrowCursor);
    QApplication::setOverrideCursor(cursor);

    mGameView.setScene(&mWinScene);
}

void GameWidget::GameOver()
{
    stopTimer();
    BGMTimer->stop();
    BGMplayer->pause();

    HPlabel->hide();
    HPRecoverylabel->hide();
    HPPlunderlabel->hide();
    AttackRatiolabel->hide();
    AttackPointlabel->hide();
    AttackSpeedlabel->hide();
    Defencelabel->hide();
    SpeedRatiolabel->hide();
    EXPRatiolabel->hide();
    HPBar->hide();
    experienceBar->hide();
    LevelLabel->hide();
    //配置结束场景
    gameClock->hide();
    mOverScene.setSceneRect(QRect(0,0,900,700));
    mOverScene.addPixmap(QPixmap(":/backgrouds/img/gameoverBackground.png"));
    loseText = new GameObject();
    loseText->setPixmap(QPixmap(":/ui/img/ui/loseText.png"));
    loseText->setScale(0.4);
    mOverScene.addItem(loseText);
    continueBtn->hide();
    restartBtn->show();
    restartBtn->move(100,100);
    backBtn->show();
    backBtn->move(100,160);
    exitBtn->show();
    exitBtn->move(100,220);

    //重置光标
    QCursor cursor;
    cursor.setShape(Qt::ArrowCursor);
    QApplication::setOverrideCursor(cursor);

    mGameView.setScene(&mOverScene);
}

void GameWidget::resetHPBar()
{
    if(mPlayer.getHP() > 0)
    {
        HPBar->setMaximum(mPlayer.getMaxHP());
        HPBar->setValue(mPlayer.getHP());
        HPBar->setFormat(" HP:"+QString::number(mPlayer.getHP())+"/"+QString::number(mPlayer.getMaxHP()));
    }
    else
    {
        emit mPlayer.isDead();
        HPBar->setValue(0);
        HPBar->setFormat(" HP:0/"+QString::number(mPlayer.getMaxHP()));
    }
}

void GameWidget::playerMove()
{
    qreal speedX = mPlayer.getSpeed()*(1+mPlayer.getSpeedRatio()*2);
    if(mKeyList.size() > 1) speedX /= sqrt(2);
    for(int keyCode : mKeyList)
    {
        switch(keyCode)
        {
        case Qt::Key_W: mPlayer.moveBy(0,-2*speedX);break;
        case Qt::Key_S: mPlayer.moveBy(0,2*speedX);break;
        case Qt::Key_A:
        {   mPlayer.moveBy(-2*speedX,0);
            mPlayer.setFaceDir(0);
            break;
        }
        case Qt::Key_D:
        {mPlayer.moveBy(2*speedX,0);
            mPlayer.setFaceDir(1);
            break;
        }
        }
    }
    if(mPlayer.pos().x()<0)
        mPlayer.setX(0);
    if(mPlayer.pos().y()<100)
        mPlayer.setY(100);
    if(mPlayer.pos().x()>900-mPlayer.scale()*mPlayer.pixmap().width())
        mPlayer.setX(900-mPlayer.scale()*mPlayer.pixmap().width());
    if(mPlayer.pos().y()>700-mPlayer.scale()*mPlayer.pixmap().height())
        mPlayer.setY(700-mPlayer.scale()*mPlayer.pixmap().height());
}


void GameWidget::keyPressEvent(QKeyEvent *event)
{
    //Q键暂停
    if(event->key() == Qt::Key_Q)
    {
        pauseBTN->click();
        // this->isStopped = !this->isStopped;
        // if(this->isStopped) stopTimer();
        // else startTimer();
    }

    switch(event->key())
    {
    case Qt::Key_W:
    case Qt::Key_S:
    case Qt::Key_A:
    case Qt::Key_D:
        mKeyList.append(event->key());
        break;
    }

    // QKeyEvent *key=(QKeyEvent*) event;
    // switch(key->key())

    // {
    // case Qt::Key_Up:
    // case Qt::Key_Down:
    // case Qt::Key_Left:
    // case Qt::Key_Right:
    //     mBulletDirList.append(key->key());
    //     break;
    // }
    // //qDebug()<<key->key()<<"is pressed";
}

void GameWidget::keyReleaseEvent(QKeyEvent *event)
{
    if(mKeyList.contains(event->key())){
        mKeyList.removeAll(event->key());
    }

    // if(mBulletDirList.contains(event->key())){
    //     mBulletDirList.removeOne(event->key());
    // }
}

void GameWidget::mousePressEvent(QMouseEvent *event)
{

    if(!isRunning) return;
    isPressed = 1;
    //qDebug()<<"hello";
    playerShootTimer->start(mPlayer.getAttackInterval());


    QWidget::mousePressEvent(event);
}

void GameWidget::mouseMoveEvent(QMouseEvent *event)
{
    if(!isPressed) return;

    setMouseTracking(true);
    //qDebug()<<"move";
    //event->accept();


    QPointF moveDir = event->pos() - mPlayer.getCenterPos();
    qreal _x = moveDir.x();
    qreal _y = moveDir.y();
    _x = QString::number(_x,'f',2).toDouble();
    _y = QString::number(_y,'f',2).toDouble();
    qreal _r = qSqrt(qPow(_x,2) + qPow(_y,2));
    if(_r == 0) return;
    //保留两位小数
    _r = QString::number(_r,'f',2).toDouble();
    qreal dx = _x/_r;
    qreal dy = _y/_r;
    dx = QString::number(dx,'f',2).toDouble();
    dy = QString::number(dy,'f',2).toDouble();
    playerBulletDir = QPointF(dx,dy);

    QWidget::mouseMoveEvent(event);
}

void GameWidget::mouseReleaseEvent(QMouseEvent *event)
{
    if(!isRunning) return;
    //qDebug()<<"goodbye";
    isPressed = 0;
    playerShootTimer->stop();
    QWidget::mouseReleaseEvent(event);
}

void GameWidget::enemySummon(int _HP, int _Attack, qreal _Speed, int _exp, int _No)
{
    EnemyBase *Enemy = nullptr;
    switch(_No)
    {
    case 1:
    {
        Enemy = new enemyInsect(GameWidget::widget->getPlayer(),_HP,_Attack,_Speed,_exp);
        break;
    }
    case 2:
    {
        Enemy = new enemyChimera(GameWidget::widget->getPlayer(),_HP,_Attack,_Speed,_exp);
        break;
    }
    case 3:
    {
        Enemy = new enemyBig(GameWidget::widget->getPlayer(),_HP,_Attack,_Speed,_exp);
        break;
    }
    case 4:
    {
        Enemy = new enemyBubble(GameWidget::widget->getPlayer(),_HP,_Attack,_Speed,_exp);
        break;
    }
    case 5:
    {
        Enemy = new enemyBoss(GameWidget::widget->getPlayer(),_HP,_Attack,_Speed,_exp);
        break;
    }
    }
    //生成随机位置
    QPointF tpos(0,0);
    do
    {
        QPointF _pos(QRandomGenerator::global()->bounded(-50,950),QRandomGenerator::global()->bounded(100,750));
        tpos = _pos + QPointF(Enemy->pixmap().width()*Enemy->scale()/2,Enemy->pixmap().height()*Enemy->scale()/2);

    }while(abs((tpos - mPlayer.getCenterPos()).x()) < 200 && abs((tpos - mPlayer.getCenterPos()).y()) < 200);
    //若与玩家过近 重新生成位置

    if(_No == 5)
    {
        Enemy->setPos(0,100);
    }
    else Enemy->setPos(tpos);
    Enemy->setZValue(0.9);
    //auto x = QRandomGenerator::global()->bounded(0,10);

    //绑定怪物死亡与经验球生成
    connect(Enemy,&EnemyBase::isDead,[this,Enemy](){
        auto expBall = new ExpBall(Enemy->getExpDropped(),Enemy->getCenterPos());
        expBall->setZValue(0.8);
        mGameScene.addItem(expBall);
        mExpBallList.append(expBall);
    });
    getGameScene().addItem(Enemy);
    mEnemyList.append(Enemy);

}

QGraphicsScene &GameWidget::getGameScene()
{
    return mGameScene;
}

Player *GameWidget::getPlayer()
{
    return &mPlayer;
}

void GameWidget::setProperties()
{
    QFont font("宋体",11,75);
    //经验条配置
    experienceBar = new QProgressBar(this);
    experienceBar->setMaximum(100);
    experienceBar->setValue(0);
    experienceBar->move(60,100);
    experienceBar->setFixedSize(200,20);
    experienceBar->setFormat(" EXP:0/100");
    experienceBar->setFont(font);
    experienceBar->setOrientation(Qt::Horizontal);

    experienceBar->setStyleSheet(
        "QProgressBar{color:rgb(245,245,245);border-radius: 10px;"
        "background: rgb(0, 0, 0);}"
        "QProgressBar::chunk {border-radius: 10px;"
        "background: rgb(0, 160, 230);}");

    //通过setStyleSheet样式设计进度条样式
    //QProgressBar:进度条背景 设置
    //QProgressBar::chunk 进度条 设置
    //color:字体颜色 ；border-radius:圆角 ；background: 进度条背景颜色 ；

    experienceBar->show();

    //绑定经验值与经验条
    connect(&mPlayer,&Player::getExp,[this](){
        if(mPlayer.getPlayerExp() < 100)
        {
            experienceBar->setValue(mPlayer.getPlayerExp());
            experienceBar->setFormat(" EXP:"+QString::number(mPlayer.getPlayerExp())+"/100");
        }
        else
        {
            mPlayer.LevelBeUp();
            emit mPlayer.LevelUp();//发送升级信号
            isChoosing = 1;

            experienceBar->setValue(mPlayer.getPlayerExp());
            experienceBar->setFormat(" EXP:"+QString::number(mPlayer.getPlayerExp())+"/100");
        }
    });

    //配置等级信息
    LevelLabel = new QLabel(this);
    LevelLabel->move(60,40);
    LevelLabel->setText(" Lv:1");
    LevelLabel->setFixedSize(50,20);
    LevelLabel->setStyleSheet("QLabel{border-radius: 6px;"
                              "background-color: rgb(60, 60, 60);"
                              "color: rgb(255, 255, 255);}");

    LevelLabel->setFont(font);
    connect(&mPlayer,&Player::LevelUp,[this](){
        LevelLabel->setText(" Lv:"+QString::number(mPlayer.getPlayerLevel()));
        //qDebug()<<mPlayer.getPlayerLevel();
        //LevelUPAudioplayer->setSource(QUrl("qrc:/sfx/sounds/effcet_sfx_levelup.ogg"));
        LevelUPAudioplayer->play();
    });

    LevelLabel->show();


    //血量条配置
    HPBar = new QProgressBar(this);
    HPBar->setMaximum(100);
    HPBar->setMaximum(mPlayer.getMaxHP());
    HPBar->setValue(mPlayer.getHP());
    HPBar->move(60,70);
    HPBar->setFixedSize(200,20);
    HPBar->setFormat(" HP:"+QString::number(mPlayer.getHP())+"/"+QString::number(mPlayer.getMaxHP()));
    HPBar->setFont(font);
    HPBar->setOrientation(Qt::Horizontal);

    HPBar->setStyleSheet(
        "QProgressBar{color:rgb(245,245,245);border-radius: 10px;"
        "background: rgb(0, 0, 0);}"
        "QProgressBar::chunk {border-radius: 10px;"
        "background: rgb(240, 40, 40);}");

    HPBar->show();

    //绑定生命值改变与血条变化
    connect(&mPlayer,&Player::LevelUp,[this](){
        resetHPBar();
    });
    connect(this,&GameWidget::isSelected,[this](){
        resetHPBar();
        mPlayer.HPRecoverControl();
    });
    connect(&mPlayer,&Player::isHurt,[this](){
        resetHPBar();
    });


    //细节属性栏配置
    mProperties.setPixmap(QPixmap(":/ui/img/ui/propertiesicons.png"));
    mProperties.setPos(50,310);
    mProperties.setScale(0.7);
    mProperties.setZValue(2);
    mGameScene.addItem(&mProperties);

    HPlabel = new QLabel(this);
    HPRecoverylabel= new QLabel(this);
    HPPlunderlabel= new QLabel(this);
    AttackRatiolabel= new QLabel(this);
    AttackPointlabel= new QLabel(this);
    AttackSpeedlabel= new QLabel(this);
    Defencelabel= new QLabel(this);
    SpeedRatiolabel= new QLabel(this);
    EXPRatiolabel= new QLabel(this);


    //样式表
    QString qssPositive = "QLabel{border-radius: 6px;"
                          "background-color: rgb(60, 60, 60);"
                          "color: rgb(255, 255, 255);}";

    QString qssNegative = "QLabel{border-radius: 6px;"
                          "background-color: rgb(60, 60, 60);"
                          "color: rgb(255, 0, 0);}";

    HPlabel->move(158,325);
    HPlabel->setText("5");
    HPlabel->setFixedSize(30,24);
    HPlabel->setStyleSheet(qssPositive);
    HPlabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    HPlabel->show();

    HPRecoverylabel->move(158,353);
    HPRecoverylabel->setText("0");
    HPRecoverylabel->setFixedSize(30,24);
    HPRecoverylabel->setStyleSheet(qssPositive);
    HPRecoverylabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    HPRecoverylabel->show();

    HPPlunderlabel->move(158,381);
    HPPlunderlabel->setText("0%");
    HPPlunderlabel->setFixedSize(30,24);
    HPPlunderlabel->setStyleSheet(qssPositive);
    HPPlunderlabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    HPPlunderlabel->show();

    AttackRatiolabel->move(158,409);
    AttackRatiolabel->setText("0%");
    AttackRatiolabel->setFixedSize(30,24);
    AttackRatiolabel->setStyleSheet(qssPositive);
    AttackRatiolabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    AttackRatiolabel->show();

    AttackPointlabel->move(158,437);
    AttackPointlabel->setText("1");
    AttackPointlabel->setFixedSize(30,24);
    AttackPointlabel->setStyleSheet(qssPositive);
    AttackPointlabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    AttackPointlabel->show();

    AttackSpeedlabel->move(158,467);
    AttackSpeedlabel->setText("0%");
    AttackSpeedlabel->setFixedSize(30,24);
    AttackSpeedlabel->setStyleSheet(qssPositive);
    AttackSpeedlabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    AttackSpeedlabel->show();

    Defencelabel->move(158,497);
    Defencelabel->setText("0");
    Defencelabel->setFixedSize(30,24);
    Defencelabel->setStyleSheet(qssPositive);
    Defencelabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    Defencelabel->show();

    SpeedRatiolabel->move(158,527);
    SpeedRatiolabel->setText("0%");
    SpeedRatiolabel->setFixedSize(30,24);
    SpeedRatiolabel->setStyleSheet(qssPositive);
    SpeedRatiolabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    SpeedRatiolabel->show();

    EXPRatiolabel->move(158,557);
    EXPRatiolabel->setText("0%");
    EXPRatiolabel->setFixedSize(30,24);
    EXPRatiolabel->setStyleSheet(qssPositive);
    EXPRatiolabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
    EXPRatiolabel->show();

    connect(this,&GameWidget::isSelected,[this](){
        isChoosing = 0;
        resetProperties();
    });


}

void GameWidget::resetProperties()
{
    HPlabel->setText(QString::number(mPlayer.getMaxHP()));
    HPRecoverylabel->setText(QString::number(mPlayer.getHPRecovery()));
    HPPlunderlabel->setText(QString::number(mPlayer.getHPPlunder()*100)+"%");
    AttackRatiolabel->setText(QString::number(mPlayer.getAttackRatio()*100)+"%");
    AttackPointlabel->setText(QString::number(mPlayer.getAttackPoint()));
    AttackSpeedlabel->setText(QString::number(mPlayer.getAttackSpeed())+"%");
    Defencelabel->setText(QString::number(mPlayer.getDefence()));
    SpeedRatiolabel->setText(QString::number(mPlayer.getSpeedRatio()*100)+"%");
    EXPRatiolabel->setText(QString::number(mPlayer.getEXPRatio()*100)+"%");
    HPlabel->show();
    HPRecoverylabel->show();
    HPPlunderlabel->show();
    AttackRatiolabel->show();
    AttackPointlabel->show();
    AttackSpeedlabel->show();
    Defencelabel->show();
    SpeedRatiolabel->show();
    EXPRatiolabel->show();
}


void GameWidget::player_enemyCollision()
{
    if(mPlayer.isInvincible) return;//判断无敌
    int enemyNum = mEnemyList.size();
    for(int i=0;i<enemyNum;i++)
    {
        if(mPlayer.collidesWithItem(mEnemyList[i]))
        {
            mPlayer.getHurt(mEnemyList[i]->getAttackPoint());
            emit mPlayer.isHurt();
            if(mPlayer.getHP() <= 0)//死亡
            {
                emit mPlayer.isDead();
            }
            mPlayer.isInvincible = 1;
            mPlayer.InvincibleTimer->start(GameDefine::InvincibleTime);


            // emit mEnemyList[i]->isDead(); //发出怪物死亡信号
            // mGameScene.removeItem(mEnemyList[i]);
            // if (mEnemyList[i] != nullptr) mEnemyList[i]->deleteLater();
            // mEnemyList.removeOne(mEnemyList[i]);
            // return;
        }
    }
}

void GameWidget::bullet_enemyCollision()
{
    //子弹与敌人碰撞
    int bulletNum = mBulletList.size();
    int enemyNum = mEnemyList.size();
    for(int i=0;i< bulletNum;i++)//遍历所有子弹
    {
        for(int j=0;j<enemyNum;j++)//遍历所有敌人
        {
            if(mBulletList[i]->collidesWithItem(mEnemyList[j]))
            {
                mGameScene.removeItem(mBulletList[i]);

                emit mEnemyList[j]->isHurt(); //发出怪物受伤信号
                mEnemyList[j]->getHurt(mBulletList[i]->getAttackPoint());
                if(mEnemyList[j]->getHP() <= 0 )
                {
                    emit mEnemyList[j]->isDead();//发出怪物死亡信号
                    mGameScene.removeItem(mEnemyList[j]);
                    if (mEnemyList[j] != nullptr) mEnemyList[j]->deleteLater();
                    mEnemyList.removeOne(mEnemyList[j]);
                }

                mPlayer.canPlunder();
                resetHPBar();
                if (mBulletList[i] != nullptr) mBulletList[i]->deleteLater();
                mBulletList.removeOne(mBulletList[i]);

                return;
            }
        }
    }

}

void GameWidget::bullet_playerCollision()
{
    if(mPlayer.isInvincible) return;//判断无敌
    int bulletNum = mEnemyBulletList.size();
    for(int i=0;i<bulletNum;i++)
    {
        if(mEnemyBulletList[i]->collidesWithItem(&mPlayer))
        {
            mPlayer.getHurt(mEnemyBulletList[i]->getAttackPoint());
            emit mPlayer.isHurt();
            if(mPlayer.getHP() <= 0)//死亡
            {
                emit mPlayer.isDead();
            }
            mPlayer.isInvincible = 1;
            mPlayer.InvincibleTimer->start(GameDefine::InvincibleTime);

            if (mEnemyBulletList[i] != nullptr) mEnemyBulletList[i]->deleteLater();
            mEnemyBulletList.removeOne(mEnemyBulletList[i]);

            return;

        }
    }
}

void GameWidget::releaseOutBullet()
{
    for(int i=0;i<mBulletList.size();i++)
    {
        if(mBulletList[i]->getCenterPos().x()>950 || mBulletList[i]->getCenterPos().x()<-50
            || mBulletList[i]->getCenterPos().y()>750 || mBulletList[i]->getCenterPos().y()<-50)
        {
            mGameScene.removeItem(mBulletList[i]);
            if (mBulletList[i] != nullptr) mBulletList[i]->deleteLater();
            mBulletList.removeOne(mBulletList[i]);
            return;
        }
    }
}

void GameWidget::releaseOutEnemyBullet()
{
    for(int i=0;i<mEnemyBulletList.size();i++)
    {
        if(mEnemyBulletList[i]->getCenterPos().x()>1000 || mEnemyBulletList[i]->getCenterPos().x()<-100
            || mEnemyBulletList[i]->getCenterPos().y()>800 || mEnemyBulletList[i]->getCenterPos().y()<-100)
        {
            mGameScene.removeItem(mEnemyBulletList[i]);
            if (mEnemyBulletList[i] != nullptr) mEnemyBulletList[i]->deleteLater();
            mEnemyBulletList.removeOne(mEnemyBulletList[i]);
            return;
        }
    }
}

void GameWidget::getExp()
{
    int expNum = mExpBallList.size();
    for(int i=0;i<expNum;i++)
    {
        if(abs((mExpBallList[i]->getCenterPos()-mPlayer.getCenterPos()).x())<120
            && abs((mExpBallList[i]->getCenterPos()-mPlayer.getCenterPos()).y())<120)
        {
            mExpBallList[i]->expBallMove();
        }
    }
    for(int i=0;i<expNum;i++)
    {
        if(mExpBallList[i]->collidesWithItem(&mPlayer))
        {
            mPlayer.PlayerGetExp(mExpBallList[i]->getVal());
            emit mPlayer.getExp();
            mGameScene.removeItem(mExpBallList[i]);
            if (mExpBallList[i] != nullptr) mExpBallList[i]->deleteLater();
            mExpBallList.removeOne(mExpBallList[i]);
            return;//清除一个后退出 避免“index out of range”
        }
    }
}



// main.cpp
#include <QApplication>
#include "gamewidget.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    GameWidget w;
    w.show();
    return a.exec();
}




// mybutton.cpp
#include "mybutton.h"

myButton::myButton(QWidget *parent) : QToolButton(parent)
{
    setStyleSheet("QToolButton{border:0px;}");
}

myButton::~myButton()
{
}

void myButton::enterEvent(QEnterEvent *event)
{
    setIconSize(iconSize() * 1.1);
    QToolButton::enterEvent(event);
}

void myButton::leaveEvent(QEvent *event)
{
    setIconSize(iconSize() / 1.1);
    QToolButton::leaveEvent(event);
}





//mydialog.cpp


#include "mydialog.h"

myDialog::myDialog(QWidget *parent)
    : QDialog{parent}
{
    this->resize(400,400);
    view.setParent(this);
    view.setSceneRect(QRect(0,0,400,400));
    scene.setSceneRect(QRect(0,0,400,400));
    scene.addPixmap(QPixmap(":/ui/img/ui/details.png"));
    view.setScene(&scene);

}









//mygraphicsview.cpp



#include "mygraphicsview.h"

myGraphicsView::myGraphicsView(QWidget *parent)
    : QGraphicsView(parent)
{
    setRenderHint(QPainter::Antialiasing);
    setRenderHint(QPainter::SmoothPixmapTransform);
    setMouseTracking(true);
}

void myGraphicsView::mousePressEvent(QMouseEvent *event)
{
    QPointF scenePos = mapToScene(event->pos());
    emit mousePressed(scenePos);
    QGraphicsView::mousePressEvent(event);
}

void myGraphicsView::mouseMoveEvent(QMouseEvent *event)
{
    QPointF scenePos = mapToScene(event->pos());
    emit mouseMoved(scenePos);
    QGraphicsView::mouseMoveEvent(event);
}

void myGraphicsView::mouseReleaseEvent(QMouseEvent *event)
{
    QPointF scenePos = mapToScene(event->pos());
    emit mouseReleased(scenePos);
    QGraphicsView::mouseReleaseEvent(event);
}






// myselectivebutton.cpp
#include "myselectivebutton.h"

mySelectiveButton::mySelectiveButton(int _itemNo, QWidget *parent) : QToolButton(parent), itemNo(_itemNo)
{
    setStyleSheet("QToolButton{border:0px;}");

    // 设置物品图标
    QString iconPath = ":/items/img/items/item" + QString::number(itemNo) + ".png";
    setIcon(QIcon(iconPath));
    setIconSize(QSize(80, 80));
}

mySelectiveButton::~mySelectiveButton()
{
}

void mySelectiveButton::enterEvent(QEnterEvent *event)
{
    setIconSize(iconSize() * 1.1);
    QToolButton::enterEvent(event);
}

void mySelectiveButton::leaveEvent(QEvent *event)
{
    setIconSize(iconSize() / 1.1);
    QToolButton::leaveEvent(event);
}





//player.cpp



#include "player.h"
#include"playerbullet.h"
#include"gamewidget.h"


int Player::pixStatus = 0;


Player::Player()
{
    setPixmap(QPixmap(":/roles/img/roles/usagi1.png"));
    mSpeed = 2;
    mExp = 0;
    mLevel = 1;
    mHP = 5;
    maxHP = 5;
    mHPRecovery = 0;//生命再生
    mHPPlunder = 0;//生命窃取
    mAttackPoint = 1;//初始攻击力
    mDefence = 0;//防御力
    mAttackRatio = 0;//攻击倍率
    mAttackSpeed = 0;//攻击速度
    mSpeedRatio = 0;//移速加成
    mEXPratio = 0;//经验倍率
    mBulletNum = 1;//子弹个数
    mExtraBullet = 0;//额外子弹

    InvincibleTimes = 0;//无敌次数
    recessionIndex = 0;//击退系数
    bloodAttack = 0;//生命值扣血

    HPRecoveryTimer = new QTimer(this);
    connect(HPRecoveryTimer,&QTimer::timeout,this,&Player::HPRecover);
    //HPRecoveryTimer->start(this->getRecoveryInterval());

    InvincibleTimer = new QTimer(this);
    connect(InvincibleTimer,&QTimer::timeout,[this](){
        isInvincible = 0;
    });

    //配置人物音效
    //发射音效
    SFXshoot = new QMediaPlayer(this);
    audiooutputShoot = new QAudioOutput(this);
    SFXshoot->setAudioOutput(audiooutputShoot);
    SFXshoot->setSource(QUrl("qrc:/sfx/sounds/effcet_sfx_playershoot.ogg"));
    //触发保命音效
    SFXhurt = new QMediaPlayer(this);
    audiooutputHurt = new QAudioOutput(this);
    SFXhurt->setAudioOutput(audiooutputHurt);
    SFXhurt->setSource(QUrl("qrc:/sfx/sounds/usagiHurtSFX0.MP3"));
}

QPointF Player::getPos()
{
    return pos();
}

int Player::getAttackInterval()
{
    qreal _attackSpeed = mAttackSpeed;
    _attackSpeed /= 80;
    qreal deltaT = GameDefine::OriginalAttackInterval * pow(0.5,_attackSpeed);
    return (int)deltaT < GameDefine::LimitedAttackInterval ? GameDefine::LimitedAttackInterval : (int)deltaT;
}

int Player::getRecoveryInterval()
{
    qreal _Recovery = mHPRecovery;
    _Recovery /= 8;
    qreal deltaT = 10000 * pow(0.5,_Recovery);
    return (int)deltaT;
}

void Player::HPRecoverControl()
{
    if(mHPRecovery > 0)
    {
        HPRecoveryTimer->start(getRecoveryInterval());
    }
    else
    {
        HPRecoveryTimer->stop();
    }
}

void Player::HPRecover()
{
    if(!GameWidget::widget->isRunning || mHP == maxHP) return;
    mHP++;
    GameWidget::widget->resetHPBar();
}

void Player::canPlunder()
{
    int x = QRandomGenerator::global()->bounded(0,100);
    if(x < mHPPlunder*100 && mHP < maxHP)
    {
        mHP += 1;
    }
}

void Player::playerShoot(QPointF _dir)
{
    int _attack =  (int)(getAttackPoint() * (1+getAttackRatio()));//攻击力计算
    if(_attack < 1) _attack = 1;
    qDebug()<<_attack;

    //主子弹

    for(int i=0;i<mBulletNum;i++)
    {
        auto* playerBT = new playerBullet(this,_dir,_attack);
        GameWidget::widget->getGameScene().addItem(playerBT);
        GameWidget::widget->mBulletList.append(playerBT);
        playerBT->setZValue(0.9);
        for(int j=0;j<5 * i;j++)
        {
            playerBT->BulletMove();
            //SFXplayer->play();
        }
    }


    //额外散射子弹
    int _extraNum = mExtraBullet / 2;
    int _extraAttack = _attack/2;
    if(_extraAttack < 1) _extraAttack = 1;
    if(mExtraBullet > 4)
    {
        _extraNum = 2;
        _extraAttack *= pow(1.2,mExtraBullet/2 - 2);
    }
    for(int i=0;i<_extraNum;i++)
    {
        // QPointF dirUpper(_dir.x()*0.996-_dir.y()*0.087,
        //                  _dir.y()*0.996+_dir.x()*0.087);
        // QPointF dirLower(_dir.x()*0.996+_dir.y()*0.087,
        //                  _dir.y()*0.996-_dir.x()*0.087);
        QPointF dirUpper(_dir.x()*0.966-_dir.y()*0.259,
                         _dir.y()*0.966+_dir.x()*0.259);
        QPointF dirLower(_dir.x()*0.966+_dir.y()*0.259,
                         _dir.y()*0.966-_dir.x()*0.259);
        auto* playerBTUpper = new playerBullet(this,dirUpper,_extraAttack);
        GameWidget::widget->getGameScene().addItem(playerBTUpper);
        GameWidget::widget->mBulletList.append(playerBTUpper);
        playerBTUpper->setZValue(0.9);

        auto* playerBTLower = new playerBullet(this,dirLower,_extraAttack);
        GameWidget::widget->getGameScene().addItem(playerBTLower);
        GameWidget::widget->mBulletList.append(playerBTLower);
        playerBTLower->setZValue(0.9);
        for(int j=0;j<5 * i;j++)
        {
            playerBTUpper->BulletMove();
            playerBTLower->BulletMove();
            //SFXplayer->play();
        }

    }
    SFXshoot->setSource(QUrl("qrc:/sfx/sounds/effcet_sfx_playershoot.ogg"));
    SFXshoot->play();
}

void Player::setFaceDir(bool _fac)
{
    faceDir = _fac;
    //qDebug() << faceDir;

}

void Player::getHurt(int _attack)
{
    qreal defen = mDefence;
    defen /= 8;//免伤计算
    int oriHP = mHP;
    mHP -= (int)(_attack *  pow(0.5,defen))==0 ? 1 : (int)(_attack *  pow(0.5,defen));

    if(mHP <=0 && InvincibleTimes > 0)
    {
        InvincibleTimes -= 1;
        mHP = 0;
        mHP += maxHP * 0.8;
        SFXhurt->setSource(QUrl("qrc:/sfx/sounds/usagiHurtSFX0.MP3"));
        audiooutputHurt->setVolume(1);
        SFXhurt->play();
    }
    else if(oriHP - mHP  >= 3)
    {
        SFXhurt->setSource(QUrl("qrc:/sfx/sounds/usagiHurtSFX.MP3"));
        audiooutputHurt->setVolume(0.5);
        SFXhurt->play();
    }
}



void Player::picUpdate()
{
    QString address = ":/roles/img/roles/usagi";
    address += std::to_string((pixStatus)/7+1);
    if(getFaceDir()) address += "-mir";
    if(isInvincible) address += "-invincible";
    address += ".png";

    this->setPixmap(QPixmap(address));
    pixStatus ++;
    pixStatus %= 21;
}

void Player::PlayerGetExp(int _val)
{
    mExp += (int)(_val * (1+getEXPRatio()));
}

void Player::getItem(int num)//获得物品加成
{
    switch(num)
    {
    case 0:
    {
        mHP += 3;
        maxHP += 3;
        mDefence += 2;
        mSpeedRatio -= 0.05;
        InvincibleTimes += 1;
        break;
    }
    case 1:
    {
        mEXPratio += 0.1;
        mHPRecovery += 2;
        break;
    }
    case 2:
    {
        mAttackPoint += 2;
        mAttackRatio += 0.05;
        break;
    }
    case 3:
    {
        mBulletNum += 1;
        mHP -= 5;
        maxHP -= 5;
        if(mHP <= 0)
        {
            mHP = 1;
        }
        if(maxHP <= 0)
        {
            maxHP = 1;
        }
        mDefence -= 3;
        break;
    }
    case 4:
    {
        mAttackPoint += 1;
        mHP += 2;
        maxHP += 2;
        break;
    }
    case 5:
    {
        mAttackPoint += 2;
        mHP += 2;
        maxHP += 2;
        mDefence += 2;
        break;
    }
    case 6:
    {
        mAttackSpeed += 10;
        mHPRecovery += 2;
        mSpeedRatio += 0.03;
        break;
    }
    case 7://柠檬水
    {
        mSpeedRatio += 0.05;
        mHPPlunder += 0.05;
        break;
    }
    case 8:
    {
        mAttackPoint += 2;
        mDefence -= 1;
        mHPPlunder += 0.05;
        break;
    }
    case 9:
    {
        mHP += 3;
        maxHP += 3;
        mHPRecovery += 3;
        mAttackRatio += 0.05;
        break;
    }
    case 10:
    {
        mAttackPoint += 5;
        mAttackRatio += 0.1;
        mAttackSpeed += 10;
        break;
    }
    case 11:
    {
        mEXPratio += 0.15;
        mAttackRatio += 0.05;
        break;
    }
    case 12:
    {
        mAttackPoint += 3;
        mAttackSpeed += 15;
        mDefence -= 2;
        break;
    }
    case 13:
    {
        mDefence += 5;
        mEXPratio -= 0.1;
        break;
    }
    case 14:
    {
        mHP += 4;
        maxHP +=4;
        mHPRecovery += 2;
        break;
    }
    case 15:
    {
        mEXPratio += 0.1;
        mHP += 1;
        maxHP += 1;
        mDefence += 1;
        break;
    }
    case 16:
    {
        mEXPratio += 0.2;
        mAttackSpeed += 10;
        break;
    }
    case 17:
    {
        mAttackRatio += 0.1;
        mHP += 5;
        maxHP += 5;
        mSpeedRatio -= 0.05;
        break;
    }
    case 18:
    {
        mAttackSpeed += 10;
        mDefence += 2;
        break;
    }
    case 19:
    {
        mAttackRatio -= 0.1;
        mExtraBullet += 2;
        mAttackSpeed -= 20;
        break;
    }
    case 20:
    {
        mAttackSpeed += 5;
        mHP += 2;
        maxHP += 2;
        mHPRecovery += 3;
        break;
    }
    case 21:
    {
        mAttackRatio += 0.1;
        mHP += 2;
        maxHP += 2;
        mSpeedRatio += 0.05;
        break;
    }
    case 22:
    {
        bloodAttack += 1;
        mAttackPoint -= 10;
        mAttackRatio -= 0.5;
        mHPPlunder += 0.1;
        break;
    }
    case 23:
    {
        recessionIndex += 1;
        mEXPratio -= 0.2;
        mDefence += 3;
        break;
    }


    }
}

void Player::resetPlayer()
{
    setPixmap(QPixmap(":/roles/img/roles/usagi1.png"));
    mSpeed = 2;
    mExp = 0;
    mLevel = 1;
    mHP = 5;
    maxHP = 5;
    mHPRecovery = 0;//生命再生
    mHPPlunder = 0;//生命窃取
    mAttackPoint = 1;//初始攻击力
    mDefence = 0;//防御力
    mAttackRatio = 0;//攻击倍率
    mAttackSpeed = 0;//攻击速度
    mSpeedRatio = 0;//移速加成
    mEXPratio = 0;//经验倍率
    mBulletNum = 1;//子弹个数
    mExtraBullet = 0;//额外子弹

    InvincibleTimes = 0;
    recessionIndex = 0;
    bloodAttack = 0;

    HPRecoveryTimer->stop();

}





//playerbullet.cpp


#include "playerbullet.h"
#include"gamewidget.h"


playerBullet::playerBullet(Player *_player, QPointF _dir,int _Attack, qreal _speed)
{
    mPlayer = _player;
    mAttackPoint = _Attack;
    //qDebug()<<mAttackPoint;
    mSpeed = _speed;

    this->setPixmap(QPixmap(":/icons/img/bulletsample.png"));
    this->setScale(0.5);
    mPos = mPlayer->getCenterPos() - QPointF(this->pixmap().width()*scale()/2,this->pixmap().height()*scale()/2);
    this->setPos(mPos);


    mDir = Bullet::MouseDir;
    moveDir = _dir;

}

playerBullet::playerBullet(Player *_player, BulletDir _dir, int _Attack, qreal _speed)
{
    mPlayer = _player;
    mAttackPoint = _Attack;
    qDebug()<<mAttackPoint;
    mSpeed = _speed;
    //mSpeed = 3;

    this->setPixmap(QPixmap(":/icons/img/bulletsample.png"));
    this->setScale(0.5);
    mPos = mPlayer->getCenterPos() - QPointF(this->pixmap().width()*scale()/2,this->pixmap().height()*scale()/2);
    this->setPos(mPos);


    mDir = _dir;
}






//sounds.qrc



<RCC>
    <qresource prefix="/bgm">
        <file>sounds/gameBGM.MP3</file>
        <file>sounds/winBGM.mp3</file>
	<file>sounds/loseBGM.ncm</file>
    </qresource>
    <qresource prefix="/sfx">
        <file>sounds/effcet_sfx_playershoot.ogg</file>
        <file>sounds/effcet_ui_button.mp3</file>
        <file>sounds/effcet_sfx_levelup.ogg</file>
        <file>sounds/bigSFX.MP3</file>
        <file>sounds/bubbleSFX.MP3</file>
        <file>sounds/chimeraSFX.MP3</file>
        <file>sounds/bossSFX.ogg</file>
        <file>sounds/usagiHurtSFX.MP3</file>
        <file>sounds/usagiHurtSFX0.MP3</file>
    </qresource>
</RCC>




//img.qrc



<RCC>
    <qresource prefix="/backgrouds">
        <file>img/GameBackground.png</file>
        <file>img/grayBackground.png</file>
        <file>img/gamewinBackground.png</file>
        <file>img/StartBackground.png</file>
        <file>img/gameoverBackground.png</file>
    </qresource>
    <qresource prefix="/icons">
        <file>img/bulletsample.png</file>
        <file>img/expball.png</file>
        <file>img/pausebtn.png</file>
        <file>img/cursor.png</file>
        <file>img/enemybulletsample.png</file>
        <file>img/bomb.png</file>
        <file>img/windowicon.png</file>
    </qresource>
    <qresource prefix="/roles">
        <file>img/roles/usagi1.png</file>
        <file>img/roles/usagi1-mir.png</file>
        <file>img/roles/usagi2.png</file>
        <file>img/roles/usagi2-mir.png</file>
        <file>img/roles/usagi3.png</file>
        <file>img/roles/usagi3-mir.png</file>
        <file>img/roles/chimera2.png</file>
        <file>img/roles/chimera1.png</file>
        <file>img/roles/chimera4.png</file>
        <file>img/roles/chimera4-mir.png</file>
        <file>img/roles/chimera3.png</file>
        <file>img/roles/chimera3-mir.png</file>
        <file>img/roles/chimera1-mir.png</file>
        <file>img/roles/chimera2-mir.png</file>
        <file>img/roles/usagi1-invincible.png</file>
        <file>img/roles/usagi1-mir-invincible.png</file>
        <file>img/roles/usagi2-invincible.png</file>
        <file>img/roles/usagi2-mir-invincible.png</file>
        <file>img/roles/usagi3-invincible.png</file>
        <file>img/roles/usagi3-mir-invincible.png</file>
        <file>img/roles/chimera5.png</file>
        <file>img/roles/chimera5-mir.png</file>
    </qresource>
    <qresource prefix="/item">
        <file>img/items/itemicon1.png</file>
        <file>img/items/itemicon2.png</file>
        <file>img/items/itemicon3.png</file>
        <file>img/items/itemicon4.png</file>
        <file>img/items/itemicon5.png</file>
        <file>img/items/itemicon6.png</file>
        <file>img/items/itemicon7.png</file>
        <file>img/items/itemicon8.png</file>
        <file>img/items/itemicon9.png</file>
        <file>img/items/itemicon10.png</file>
        <file>img/items/itemicon11.png</file>
        <file>img/items/itemicon12.png</file>
        <file>img/items/itemicon13.png</file>
        <file>img/items/itemicon14.png</file>
        <file>img/items/itemicon15.png</file>
        <file>img/items/itemicon16.png</file>
        <file>img/items/itemicon17.png</file>
        <file>img/items/itemicon18.png</file>
        <file>img/items/itemicon19.png</file>
        <file>img/items/itemicon20.png</file>
        <file>img/items/itemicon21.png</file>
        <file>img/items/itemicon0.png</file>
        <file>img/items/itemicon22.png</file>
        <file>img/items/itemicon23.png</file>
    </qresource>
    <qresource prefix="/ui">
        <file>img/ui/backBtn.png</file>
        <file>img/ui/checkRecordBtn.png</file>
        <file>img/ui/onceMoreBtn.png</file>
        <file>img/ui/propertiesicons.png</file>
        <file>img/ui/startBtn.png</file>
        <file>img/ui/loseText.png</file>
        <file>img/ui/exitBtn.png</file>
        <file>img/ui/continueBtn.png</file>
        <file>img/ui/winText.png</file>
        <file>img/ui/details.png</file>
        <file>img/ui/detailBtn.png</file>
    </qresource>
    <qresource prefix="/">
        <file>img/roles/chimera1.png</file>
    </qresource>
</RCC>




//gamewidget.ui



<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>GameWidget</class>
 <widget class="QWidget" name="GameWidget">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>800</width>
    <height>600</height>
   </rect>
  </property>
  <property name="focusPolicy">
   <enum>Qt::StrongFocus</enum>
  </property>
  <property name="windowTitle">
   <string>GameWidget</string>
  </property>
 </widget>
 <resources/>
 <connections/>
</ui>